<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Meter Image Upload</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 500px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }

        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 30px;
            font-size: 24px;
        }

        .upload-area {
            border: 3px dashed #ddd;
            border-radius: 15px;
            padding: 40px 20px;
            text-align: center;
            background: #fafafa;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 20px;
        }

        .upload-area:hover {
            border-color: #667eea;
            background: #f0f4ff;
        }

        .upload-area.dragover {
            border-color: #667eea;
            background: #e8f0ff;
        }

        .camera-icon {
            font-size: 48px;
            color: #667eea;
            margin-bottom: 10px;
        }

        .upload-text {
            color: #666;
            font-size: 16px;
            margin-bottom: 15px;
        }

        #fileInput {
            display: none;
        }

        .camera-btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            font-size: 16px;
            cursor: pointer;
            transition: background 0.3s ease;
        }

        .camera-btn:hover {
            background: #5a6fd8;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
        }

        input[type="text"] {
            width: 100%;
            padding: 15px;
            border: 2px solid #ddd;
            border-radius: 10px;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }

        input[type="text"]:focus {
            outline: none;
            border-color: #667eea;
        }

        .upload-btn {
            width: 100%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 18px;
            border-radius: 12px;
            font-size: 18px;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.2s ease;
            margin-top: 10px;
        }

        .upload-btn:hover {
            transform: translateY(-2px);
        }

        .upload-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
        }

        .preview-area {
            margin: 20px 0;
            text-align: center;
        }

        .preview-image {
            max-width: 100%;
            max-height: 300px;
            border-radius: 10px;
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
        }

        .status {
            text-align: center;
            padding: 15px;
            margin: 15px 0;
            border-radius: 10px;
            font-weight: 600;
        }

        .status.success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .status.error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .status.loading {
            background: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }

        .config-area {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        }

        .config-toggle {
            background: #6c757d;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 14px;
            cursor: pointer;
            margin-bottom: 15px;
        }

        .hidden {
            display: none;
        }

        @media (max-width: 480px) {
            .container {
                margin: 10px;
                padding: 20px;
            }
            
            h1 {
                font-size: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üìä Meter Image Upload</h1>
        
        <div class="config-area">
            <button class="config-toggle" onclick="toggleConfig()">‚öôÔ∏è Settings</button>
            <div id="configPanel" class="hidden">
                <div class="form-group">
                    <label for="githubToken">GitHub Personal Access Token:</label>
                    <input type="password" id="githubToken" placeholder="Enter your GitHub token">
                </div>
                <div class="form-group">
                    <label for="repoPath">Repository (format: username/repo-name):</label>
                    <input type="text" id="repoPath" placeholder="e.g., yourusername/meter-images" value="">
                </div>
                <button class="camera-btn" onclick="saveConfig()">Save Settings</button>
            </div>
        </div>

        <div class="upload-area" onclick="document.getElementById('fileInput').click()" 
             ondragover="event.preventDefault(); this.classList.add('dragover')" 
             ondragleave="this.classList.remove('dragover')"
             ondrop="handleDrop(event)">
            <div class="camera-icon">üì∑</div>
            <div class="upload-text">Tap to take photo or select image</div>
            <button class="camera-btn">Choose Image</button>
        </div>

        <input type="file" id="fileInput" accept="image/*" capture="environment" onchange="handleFileSelect(event)">

        <div class="preview-area" id="previewArea"></div>

        <div class="form-group">
            <label for="meterNumber">Meter Number:</label>
            <input type="text" id="meterNumber" placeholder="Enter meter number" required>
        </div>

        <button class="upload-btn" id="uploadBtn" onclick="uploadImage()" disabled>
            Upload Image
        </button>

        <div id="status"></div>
    </div>

    <script>
        let selectedFile = null;

        // Load saved config on page load
        window.onload = function() {
            const savedToken = localStorage.getItem('githubToken');
            const savedRepo = localStorage.getItem('repoPath');
            
            if (savedToken) document.getElementById('githubToken').value = savedToken;
            if (savedRepo) document.getElementById('repoPath').value = savedRepo;
            
            checkConfig();
        };

        function toggleConfig() {
            const panel = document.getElementById('configPanel');
            panel.classList.toggle('hidden');
        }

        function saveConfig() {
            const token = document.getElementById('githubToken').value;
            const repo = document.getElementById('repoPath').value;
            
            if (token && repo) {
                localStorage.setItem('githubToken', token);
                localStorage.setItem('repoPath', repo);
                showStatus('Settings saved successfully!', 'success');
                toggleConfig();
                checkConfig();
            } else {
                showStatus('Please fill in both GitHub token and repository path.', 'error');
            }
        }

        function checkConfig() {
            const token = localStorage.getItem('githubToken');
            const repo = localStorage.getItem('repoPath');
            
            if (!token || !repo) {
                showStatus('Please configure your GitHub settings first.', 'error');
                document.getElementById('configPanel').classList.remove('hidden');
            }
        }

        function handleFileSelect(event) {
            const file = event.target.files[0];
            if (file) {
                selectedFile = file;
                showPreview(file);
                updateUploadButton();
            }
        }

        function handleDrop(event) {
            event.preventDefault();
            event.target.classList.remove('dragover');
            
            const files = event.dataTransfer.files;
            if (files.length > 0 && files[0].type.startsWith('image/')) {
                selectedFile = files[0];
                showPreview(files[0]);
                updateUploadButton();
            }
        }

        function showPreview(file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                const previewArea = document.getElementById('previewArea');
                previewArea.innerHTML = `<img src="${e.target.result}" alt="Preview" class="preview-image">`;
            };
            reader.readAsDataURL(file);
        }

        function updateUploadButton() {
            const meterNumber = document.getElementById('meterNumber').value.trim();
            const uploadBtn = document.getElementById('uploadBtn');
            
            if (selectedFile && meterNumber) {
                uploadBtn.disabled = false;
            } else {
                uploadBtn.disabled = true;
            }
        }

        // Update button when meter number changes
        document.getElementById('meterNumber').addEventListener('input', updateUploadButton);

        async function uploadImage() {
            if (!selectedFile) return;
            
            const meterNumber = document.getElementById('meterNumber').value.trim();
            const token = localStorage.getItem('githubToken');
            const repo = localStorage.getItem('repoPath');
            
            if (!token || !repo) {
                showStatus('Please configure GitHub settings first.', 'error');
                return;
            }
            
            if (!meterNumber) {
                showStatus('Please enter a meter number.', 'error');
                return;
            }

            showStatus('Uploading image...', 'loading');
            document.getElementById('uploadBtn').disabled = true;

            try {
                // Convert file to base64
                const base64 = await fileToBase64(selectedFile);
                const base64Content = base64.split(',')[1]; // Remove data:image/jpeg;base64, prefix
                
                // Generate filename
                const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);
                const extension = selectedFile.name.split('.').pop().toLowerCase();
                const filename = `${meterNumber}_${timestamp}.${extension}`;
                
                // Upload to GitHub
                const response = await fetch(`https://api.github.com/repos/${repo}/contents/incoming/${filename}`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `token ${token}`,
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        message: `Upload meter image: ${filename}`,
                        content: base64Content
                    })
                });

                if (response.ok) {
                    showStatus(`Image uploaded successfully as ${filename}!`, 'success');
                    
                    // Reset form
                    selectedFile = null;
                    document.getElementById('fileInput').value = '';
                    document.getElementById('meterNumber').value = '';
                    document.getElementById('previewArea').innerHTML = '';
                    
                } else {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Upload failed');
                }
                
            } catch (error) {
                console.error('Upload error:', error);
                showStatus(`Upload failed: ${error.message}`, 'error');
            } finally {
                updateUploadButton();
            }
        }

        function fileToBase64(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = () => resolve(reader.result);
                reader.onerror = error => reject(error);
            });
        }

        function showStatus(message, type) {
            const statusDiv = document.getElementById('status');
            statusDiv.textContent = message;
            statusDiv.className = `status ${type}`;
            
            if (type === 'success') {
                setTimeout(() => {
                    statusDiv.textContent = '';
                    statusDiv.className = '';
                }, 5000);
            }
        }
    </script>
</body>
</html>
